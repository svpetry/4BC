program = block "." .

type = ("nibble" | "byte" | "word") ["[" number "]"].

block = [ "const" ident "=" number {"," ident "=" number} ";"]
        [ "var" ident ":" type {"," ident ":" type} ";"]
        { "procedure" ident ";" block ";" } statement .

statement = [ ident ":=" expression | "call" ident 
              | "begin" statement ";" {statement ";"} "end" 
	      | "asm" mnemonic {mnemonic} "end"
              | "if" condition "then" statement 
              | "while" condition "do" statement 
	      | "shl" ident
	      | "shr" ident
	      | "inc" ident
	      | "dec" ident
	      | "outp" number "," expression 
	      | "inp" ident "," number ].

conditiongroup = conjunction { "or" conjunction}.

conjunction = condition { "and" condition}

condition = expression ("="|"#"|"<"|"<="|">"|">=") expression | "{" conditiongroup "}".

expression = [ "+"|"-"] term { ("+"|"-") term}.

term = factor {("*"|"/"|"%"|"&"|"|"|"^") factor}.

factor = ident | number | "(" expression ")" | "lo(" ident ")" | "hi(" ident ")".


PROCEDURE multiply;
VAR a, b;
BEGIN
  a := x;
  b := Y;
  z := 0;
  WHILE b > 0 DO
  BEGIN
    IF ODD b THEN z := z + a;
    a := 2 * a;
    b := b / 2
  END
END;

PROCEDURE divide;
VAR w;
BEGIN
  r := x;
  q := 0;
  w := y;
  WHILE w <= r DO w := 2 * w;
  WHILE w > y DO
  BEGIN
    q := 2 * q;
    w := w / 2;
    IF w <= r THEN
    BEGIN
      r := r - w;
      q := q + 1
    END
  END
END;